"use client"

import { useState, useRef, useEffect } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { ArrowLeft, Send, Bot, User, AlertTriangle, Smile, Frown, Meh } from "lucide-react"
import Link from "next/link"

interface Message {
  id: number
  text: string
  sender: string
  timestamp: Date
  emotion: {
    primary: string
    confidence: number
    details: { [key: string]: number }
  }
  toxicity: number
  isBot?: boolean
}

export default function ChatPage() {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: 1,
      text: "–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! –ö–∞–∫ –¥–µ–ª–∞ —Å –Ω–æ–≤—ã–º –ø—Ä–æ–µ–∫—Ç–æ–º?",
      sender: "–ê–ª–µ–∫—Å–µ–π",
      timestamp: new Date(Date.now() - 300000),
      emotion: { primary: "—Ä–∞–¥–æ—Å—Ç—å", confidence: 0.85, details: { —Ä–∞–¥–æ—Å—Ç—å: 0.85, –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ: 0.15 } },
      toxicity: 0.05,
    },
    {
      id: 2,
      text: "–û–ø—è—Ç—å —ç—Ç–∏ –¥–µ–¥–ª–∞–π–Ω—ã... –ö–æ–≥–¥–∞ —É–∂–µ —ç—Ç–æ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è?",
      sender: "–ú–∞—Ä–∏—è",
      timestamp: new Date(Date.now() - 240000),
      emotion: { primary: "—Å—Ç—Ä–µ—Å—Å", confidence: 0.78, details: { —Å—Ç—Ä–µ—Å—Å: 0.78, —Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–∏–µ: 0.22 } },
      toxicity: 0.15,
    },
    {
      id: 3,
      text: "–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, –º—ã —Å–ø—Ä–∞–≤–∏–º—Å—è! –ö–æ–º–∞–Ω–¥–∞ —É –Ω–∞—Å –æ—Ç–ª–∏—á–Ω–∞—è üí™",
      sender: "–î–º–∏—Ç—Ä–∏–π",
      timestamp: new Date(Date.now() - 180000),
      emotion: { primary: "—ç–Ω—Ç—É–∑–∏–∞–∑–º", confidence: 0.92, details: { —ç–Ω—Ç—É–∑–∏–∞–∑–º: 0.92, —Ä–∞–¥–æ—Å—Ç—å: 0.08 } },
      toxicity: 0.02,
    },
  ])

  const [newMessage, setNewMessage] = useState("")
  const [currentUser, setCurrentUser] = useState("–í—ã")
  const messagesEndRef = useRef<HTMLDivElement>(null)

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
  }

  useEffect(() => {
    scrollToBottom()
  }, [messages])

  const analyzeEmotion = (text: string) => {
    // –ü—Ä–æ—Å—Ç–∞—è —ç–º—É–ª—è—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π
    const emotionKeywords = {
      —Ä–∞–¥–æ—Å—Ç—å: ["–æ—Ç–ª–∏—á–Ω–æ", "—Å—É–ø–µ—Ä", "–∑–¥–æ—Ä–æ–≤–æ", "–∫–ª–∞—Å—Å–Ω–æ", "üëç", "üòä", "üí™"],
      —Å—Ç—Ä–µ—Å—Å: ["–¥–µ–¥–ª–∞–π–Ω", "—Å—Ä–æ—á–Ω–æ", "–ø—Ä–æ–±–ª–µ–º–∞", "–Ω–µ —É—Å–ø–µ–≤–∞—é", "üò∞", "üò§"],
      –≥–Ω–µ–≤: ["—É–∂–∞—Å–Ω–æ", "–±–µ—Å–∏—Ç", "–¥–æ—Å—Ç–∞–ª–æ", "–∏–¥–∏–æ—Ç—ã", "üò°", "ü§¨"],
      —Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–∏–µ: ["–ø–ª–æ—Ö–æ", "–Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è", "–ø—Ä–æ–≤–∞–ª", "üòû", "üòî"],
      —ç–Ω—Ç—É–∑–∏–∞–∑–º: ["–¥–∞–≤–∞–π—Ç–µ", "–º–æ–∂–µ–º", "–ø–æ–ª—É—á–∏—Ç—Å—è", "–≤–ø–µ—Ä–µ–¥", "üöÄ", "üí™"],
      –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ: [],
    }

    let maxScore = 0
    let primaryEmotion = "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ"
    const details: { [key: string]: number } = {}

    Object.entries(emotionKeywords).forEach(([emotion, keywords]) => {
      let score = 0
      keywords.forEach((keyword) => {
        if (text.toLowerCase().includes(keyword.toLowerCase())) {
          score += 0.3
        }
      })

      details[emotion] = Math.min(score, 1)
      if (score > maxScore) {
        maxScore = score
        primaryEmotion = emotion
      }
    })

    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤, —Å—á–∏—Ç–∞–µ–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–º
    if (maxScore === 0) {
      details.–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ = 0.8
      maxScore = 0.8
    }

    // –†–∞—Å—á–µ—Ç —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏
    const toxicKeywords = ["–∏–¥–∏–æ—Ç", "–¥—É—Ä–∞–∫", "–±–µ—Å–∏—Ç", "–¥–æ—Å—Ç–∞–ª–æ", "—É–∂–∞—Å"]
    let toxicity = 0
    toxicKeywords.forEach((keyword) => {
      if (text.toLowerCase().includes(keyword)) {
        toxicity += 0.3
      }
    })

    return {
      primary: primaryEmotion,
      confidence: maxScore,
      details,
      toxicity: Math.min(toxicity, 1),
    }
  }

  const handleSendMessage = () => {
    if (!newMessage.trim()) return

    const analysis = analyzeEmotion(newMessage)

    const message: Message = {
      id: messages.length + 1,
      text: newMessage,
      sender: currentUser,
      timestamp: new Date(),
      emotion: {
        primary: analysis.primary,
        confidence: analysis.confidence,
        details: analysis.details,
      },
      toxicity: analysis.toxicity,
    }

    setMessages([...messages, message])
    setNewMessage("")

    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–∫—Å–∏—á–Ω–æ–µ
    if (analysis.toxicity > 0.3) {
      setTimeout(() => {
        const botMessage: Message = {
          id: messages.length + 2,
          text: "‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ —Ç–æ–∫—Å–∏—á–Ω–∞—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã –≤ –∫–æ–º–∞–Ω–¥–µ.",
          sender: "EmotionBot",
          timestamp: new Date(),
          emotion: { primary: "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ", confidence: 1, details: { –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ: 1 } },
          toxicity: 0,
          isBot: true,
        }
        setMessages((prev) => [...prev, botMessage])
      }, 1000)
    }
  }

  const getEmotionIcon = (emotion: string) => {
    switch (emotion) {
      case "—Ä–∞–¥–æ—Å—Ç—å":
      case "—ç–Ω—Ç—É–∑–∏–∞–∑–º":
        return <Smile className="h-4 w-4 text-green-500" />
      case "—Å—Ç—Ä–µ—Å—Å":
      case "–≥–Ω–µ–≤":
      case "—Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–∏–µ":
        return <Frown className="h-4 w-4 text-red-500" />
      default:
        return <Meh className="h-4 w-4 text-gray-500" />
    }
  }

  const getEmotionColor = (emotion: string) => {
    switch (emotion) {
      case "—Ä–∞–¥–æ—Å—Ç—å":
        return "bg-green-100 text-green-800"
      case "—ç–Ω—Ç—É–∑–∏–∞–∑–º":
        return "bg-blue-100 text-blue-800"
      case "—Å—Ç—Ä–µ—Å—Å":
        return "bg-orange-100 text-orange-800"
      case "–≥–Ω–µ–≤":
        return "bg-red-100 text-red-800"
      case "—Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–∏–µ":
        return "bg-purple-100 text-purple-800"
      default:
        return "bg-gray-100 text-gray-800"
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100">
      <div className="container mx-auto px-4 py-8">
        {/* Header */}
        <div className="flex items-center justify-between mb-8">
          <div className="flex items-center gap-4">
            <Link href="/">
              <Button variant="ghost" size="sm">
                <ArrowLeft className="h-4 w-4 mr-2" />
                –ù–∞–∑–∞–¥
              </Button>
            </Link>
            <div>
              <h1 className="text-3xl font-bold text-gray-900">–ß–∞—Ç-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä</h1>
              <p className="text-gray-600">–ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</p>
            </div>
          </div>

          <div className="flex items-center gap-4">
            <Input
              placeholder="–í–∞—à–µ –∏–º—è"
              value={currentUser}
              onChange={(e) => setCurrentUser(e.target.value)}
              className="w-32"
            />
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-4 gap-8">
          {/* Chat */}
          <div className="lg:col-span-3">
            <Card className="bg-white/80 backdrop-blur-sm border-0 shadow-lg h-[600px] flex flex-col">
              <CardHeader>
                <CardTitle>–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —á–∞—Ç #general</CardTitle>
                <CardDescription>–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</CardDescription>
              </CardHeader>

              <CardContent className="flex-1 flex flex-col">
                <div className="flex-1 overflow-y-auto space-y-4 mb-4">
                  {messages.map((message) => (
                    <div
                      key={message.id}
                      className={`flex ${message.sender === currentUser ? "justify-end" : "justify-start"}`}
                    >
                      <div
                        className={`max-w-xs lg:max-w-md px-4 py-3 rounded-lg ${
                          message.isBot
                            ? "bg-yellow-100 border border-yellow-300"
                            : message.sender === currentUser
                              ? "bg-blue-500 text-white"
                              : "bg-gray-100"
                        }`}
                      >
                        <div className="flex items-center gap-2 mb-1">
                          {message.isBot ? <Bot className="h-4 w-4" /> : <User className="h-4 w-4" />}
                          <span className="text-sm font-medium">{message.sender}</span>
                          <span className="text-xs opacity-70">{message.timestamp.toLocaleTimeString()}</span>
                        </div>

                        <p className="text-sm mb-2">{message.text}</p>

                        {!message.isBot && (
                          <div className="flex items-center gap-2 text-xs">
                            {getEmotionIcon(message.emotion.primary)}
                            <Badge variant="outline" className={getEmotionColor(message.emotion.primary)}>
                              {message.emotion.primary} ({Math.round(message.emotion.confidence * 100)}%)
                            </Badge>
                            {message.toxicity > 0.3 && (
                              <Badge variant="destructive">
                                <AlertTriangle className="h-3 w-3 mr-1" />
                                –¢–æ–∫—Å–∏—á–Ω–æ
                              </Badge>
                            )}
                          </div>
                        )}
                      </div>
                    </div>
                  ))}
                  <div ref={messagesEndRef} />
                </div>

                <div className="flex gap-2">
                  <Textarea
                    placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
                    value={newMessage}
                    onChange={(e) => setNewMessage(e.target.value)}
                    onKeyPress={(e) => {
                      if (e.key === "Enter" && !e.shiftKey) {
                        e.preventDefault()
                        handleSendMessage()
                      }
                    }}
                    className="flex-1 min-h-[40px] max-h-[120px]"
                  />
                  <Button onClick={handleSendMessage} disabled={!newMessage.trim()}>
                    <Send className="h-4 w-4" />
                  </Button>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Analytics Sidebar */}
          <div className="space-y-6">
            {/* Current Emotion Analysis */}
            <Card className="bg-white/80 backdrop-blur-sm border-0 shadow-lg">
              <CardHeader>
                <CardTitle className="text-lg">–ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  {messages.length > 0 &&
                    Object.entries(messages[messages.length - 1]?.emotion.details || {}).map(
                      ([emotion, confidence]) => (
                        <div key={emotion} className="flex justify-between items-center">
                          <span className="text-sm capitalize">{emotion}</span>
                          <span className="text-sm font-medium">{Math.round(confidence * 100)}%</span>
                        </div>
                      ),
                    )}
                </div>
              </CardContent>
            </Card>

            {/* Chat Statistics */}
            <Card className="bg-white/80 backdrop-blur-sm border-0 shadow-lg">
              <CardHeader>
                <CardTitle className="text-lg">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="flex justify-between">
                  <span className="text-sm">–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π:</span>
                  <span className="font-medium">{messages.length}</span>
                </div>

                <div className="flex justify-between">
                  <span className="text-sm">–ü–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö:</span>
                  <span className="font-medium text-green-600">
                    {messages.filter((m) => ["—Ä–∞–¥–æ—Å—Ç—å", "—ç–Ω—Ç—É–∑–∏–∞–∑–º"].includes(m.emotion.primary)).length}
                  </span>
                </div>

                <div className="flex justify-between">
                  <span className="text-sm">–ù–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö:</span>
                  <span className="font-medium text-red-600">
                    {messages.filter((m) => ["—Å—Ç—Ä–µ—Å—Å", "–≥–Ω–µ–≤", "—Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–∏–µ"].includes(m.emotion.primary)).length}
                  </span>
                </div>

                <div className="flex justify-between">
                  <span className="text-sm">–¢–æ–∫—Å–∏—á–Ω—ã—Ö:</span>
                  <span className="font-medium text-orange-600">{messages.filter((m) => m.toxicity > 0.3).length}</span>
                </div>
              </CardContent>
            </Card>

            {/* Tips */}
            <Card className="bg-white/80 backdrop-blur-sm border-0 shadow-lg">
              <CardHeader>
                <CardTitle className="text-lg">–°–æ–≤–µ—Ç—ã</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-2 text-sm text-gray-600">
                  <p>üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã</p>
                  <p>‚ö†Ô∏è –ò–∑–±–µ–≥–∞–π—Ç–µ —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–∑–≤–∞—Ç—å —Å—Ç—Ä–µ—Å—Å</p>
                  <p>ü§ù –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –∫–æ–ª–ª–µ–≥ –≤ —Å–ª–æ–∂–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö</p>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  )
}
