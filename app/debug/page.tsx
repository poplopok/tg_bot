"use client"

import { useState } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { ArrowLeft, RefreshCw, CheckCircle, XCircle, AlertTriangle } from "lucide-react"
import Link from "next/link"

export default function DebugPage() {
  const [webhookInfo, setWebhookInfo] = useState<any>(null)
  const [loading, setLoading] = useState(false)

  const checkWebhook = async () => {
    setLoading(true)
    try {
      const response = await fetch("/api/set-webhook")
      const data = await response.json()
      setWebhookInfo(data)
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ webhook:", error)
    } finally {
      setLoading(false)
    }
  }

  const resetWebhook = async () => {
    setLoading(true)
    try {
      const response = await fetch("/api/set-webhook", { method: "POST" })
      const data = await response.json()
      setWebhookInfo(data)
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ webhook:", error)
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100">
      <div className="container mx-auto px-4 py-8">
        <div className="flex items-center gap-4 mb-8">
          <Link href="/">
            <Button variant="ghost" size="sm">
              <ArrowLeft className="h-4 w-4 mr-2" />
              –ù–∞–∑–∞–¥
            </Button>
          </Link>
          <div>
            <h1 className="text-3xl font-bold text-gray-900">–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</h1>
            <p className="text-gray-600">–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º</p>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* Webhook Status */}
          <Card className="bg-white/80 backdrop-blur-sm border-0 shadow-lg">
            <CardHeader>
              <CardTitle>–°—Ç–∞—Ç—É—Å Webhook</CardTitle>
              <CardDescription>–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex gap-2">
                <Button onClick={checkWebhook} disabled={loading} variant="outline">
                  <RefreshCw className={`h-4 w-4 mr-2 ${loading ? "animate-spin" : ""}`} />
                  –ü—Ä–æ–≤–µ—Ä–∏—Ç—å
                </Button>
                <Button onClick={resetWebhook} disabled={loading}>
                  –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
                </Button>
              </div>

              {webhookInfo && (
                <div className="space-y-3">
                  {webhookInfo.success ? (
                    <Alert className="border-green-200 bg-green-50">
                      <CheckCircle className="h-4 w-4 text-green-600" />
                      <AlertDescription className="text-green-800">Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ</AlertDescription>
                    </Alert>
                  ) : (
                    <Alert className="border-red-200 bg-red-50">
                      <XCircle className="h-4 w-4 text-red-600" />
                      <AlertDescription className="text-red-800">–û—à–∏–±–∫–∞ webhook: {webhookInfo.error}</AlertDescription>
                    </Alert>
                  )}

                  {webhookInfo.webhook_info && (
                    <div className="bg-gray-50 p-3 rounded">
                      <h4 className="font-medium mb-2">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook:</h4>
                      <pre className="text-xs overflow-x-auto">{JSON.stringify(webhookInfo.webhook_info, null, 2)}</pre>
                    </div>
                  )}
                </div>
              )}
            </CardContent>
          </Card>

          {/* Quick Tests */}
          <Card className="bg-white/80 backdrop-blur-sm border-0 shadow-lg">
            <CardHeader>
              <CardTitle>–ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã</CardTitle>
              <CardDescription>–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-3">
                <div className="flex items-center justify-between p-3 rounded border">
                  <span>Webhook endpoint</span>
                  <Badge variant="outline">GET /api/webhook</Badge>
                </div>

                <div className="flex items-center justify-between p-3 rounded border">
                  <span>Bot token</span>
                  <Badge variant="secondary">–ù–∞—Å—Ç—Ä–æ–µ–Ω</Badge>
                </div>

                <div className="flex items-center justify-between p-3 rounded border">
                  <span>Supabase</span>
                  <Badge variant="outline">–¢—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏</Badge>
                </div>
              </div>

              <Alert className="border-yellow-200 bg-yellow-50">
                <AlertTriangle className="h-4 w-4 text-yellow-600" />
                <AlertDescription className="text-yellow-800">
                  –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook
                </AlertDescription>
              </Alert>
            </CardContent>
          </Card>

          {/* Common Issues */}
          <Card className="bg-white/80 backdrop-blur-sm border-0 shadow-lg lg:col-span-2">
            <CardHeader>
              <CardTitle>–ß–∞—Å—Ç—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ —Ä–µ—à–µ–Ω–∏—è</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <h4 className="font-medium mb-3 text-red-600">üö® –ë–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç</h4>
                  <ul className="space-y-2 text-sm text-gray-600">
                    <li>‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ</li>
                    <li>‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ –Ω–∞ Vercel</li>
                    <li>‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ Vercel Dashboard</li>
                    <li>‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –≤ –±–æ—Ç–µ</li>
                  </ul>
                </div>

                <div>
                  <h4 className="font-medium mb-3 text-orange-600">‚ö†Ô∏è –û—à–∏–±–∫–∏ –∞–Ω–∞–ª–∏–∑–∞</h4>
                  <ul className="space-y-2 text-sm text-gray-600">
                    <li>‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Supabase SERVICE_ROLE –∫–ª—é—á</li>
                    <li>‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã</li>
                    <li>‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å HF –º–æ–¥–µ–ª–µ–π</li>
                    <li>‚Ä¢ Fallback –∞–Ω–∞–ª–∏–∑ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ–≥–¥–∞</li>
                  </ul>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  )
}
