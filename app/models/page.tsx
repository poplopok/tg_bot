"use client"

import { useState } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Textarea } from "@/components/ui/textarea"
import { Badge } from "@/components/ui/badge"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { ArrowLeft, TestTube, CheckCircle, XCircle, Loader2, Brain, Shield, Heart } from "lucide-react"
import Link from "next/link"

interface ModelResult {
  model: string
  id: string
  type: string
  status: string
  data?: any
  error?: string
  available: boolean
}

export default function ModelsPage() {
  const [testText, setTestText] = useState("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞? –°–µ–≥–æ–¥–Ω—è –æ—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å!")
  const [results, setResults] = useState<ModelResult[]>([])
  const [loading, setLoading] = useState(false)
  const [summary, setSummary] = useState<any>(null)

  const testModels = async () => {
    setLoading(true)
    try {
      const response = await fetch("/api/test-models", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ text: testText }),
      })

      const data = await response.json()
      setResults(data.results || [])
      setSummary(data.summary || null)
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", error)
    } finally {
      setLoading(false)
    }
  }

  const getTypeIcon = (type: string) => {
    switch (type) {
      case "sentiment":
        return <Heart className="h-4 w-4" />
      case "toxicity":
        return <Shield className="h-4 w-4" />
      case "emotion":
        return <Brain className="h-4 w-4" />
      default:
        return <Brain className="h-4 w-4" />
    }
  }

  const getTypeColor = (type: string) => {
    switch (type) {
      case "sentiment":
        return "bg-blue-100 text-blue-800"
      case "toxicity":
        return "bg-red-100 text-red-800"
      case "emotion":
        return "bg-purple-100 text-purple-800"
      default:
        return "bg-gray-100 text-gray-800"
    }
  }

  const formatResult = (result: ModelResult) => {
    if (!result.data || !Array.isArray(result.data)) return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

    if (Array.isArray(result.data[0])) {
      // –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
      const topResult = result.data[0][0]
      if (topResult) {
        return `${topResult.label}: ${(topResult.score * 100).toFixed(1)}%`
      }
    }

    return JSON.stringify(result.data).slice(0, 100) + "..."
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100">
      <div className="container mx-auto px-4 py-8">
        {/* Header */}
        <div className="flex items-center gap-4 mb-8">
          <Link href="/">
            <Button variant="ghost" size="sm">
              <ArrowLeft className="h-4 w-4 mr-2" />
              –ù–∞–∑–∞–¥
            </Button>
          </Link>
          <div>
            <h1 className="text-3xl font-bold text-gray-900">–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π</h1>
            <p className="text-gray-600">–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Hugging Face –º–æ–¥–µ–ª–µ–π</p>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Test Interface */}
          <div className="lg:col-span-1">
            <Card className="bg-white/80 backdrop-blur-sm border-0 shadow-lg">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <TestTube className="h-5 w-5" />
                  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                </CardTitle>
                <CardDescription>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ–º–∏ –º–æ–¥–µ–ª—è–º–∏</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <label className="text-sm font-medium mb-2 block">–¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:</label>
                  <Textarea
                    value={testText}
                    onChange={(e) => setTestText(e.target.value)}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ..."
                    className="min-h-[100px]"
                  />
                </div>

                <Button onClick={testModels} disabled={loading || !testText.trim()} className="w-full">
                  {loading ? (
                    <>
                      <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                      –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...
                    </>
                  ) : (
                    <>
                      <TestTube className="h-4 w-4 mr-2" />
                      –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª–∏
                    </>
                  )}
                </Button>

                {summary && (
                  <Alert>
                    <CheckCircle className="h-4 w-4" />
                    <AlertDescription>
                      –î–æ—Å—Ç—É–ø–Ω–æ: {summary.available}/{summary.total} –º–æ–¥–µ–ª–µ–π
                    </AlertDescription>
                  </Alert>
                )}
              </CardContent>
            </Card>

            {/* Model Info */}
            <Card className="bg-white/80 backdrop-blur-sm border-0 shadow-lg mt-6">
              <CardHeader>
                <CardTitle>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª—è—Ö</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <h4 className="font-medium mb-2">üá∑üá∫ –†—É—Å—Å–∫–∏–π —è–∑—ã–∫:</h4>
                  <ul className="text-sm text-gray-600 space-y-1">
                    <li>‚Ä¢ RuBERT - –∞–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏</li>
                    <li>‚Ä¢ BlancheFort RuBERT - —ç–º–æ—Ü–∏–∏</li>
                    <li>‚Ä¢ RuSentiment - –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ</li>
                  </ul>
                </div>

                <div>
                  <h4 className="font-medium mb-2">üåç –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ:</h4>
                  <ul className="text-sm text-gray-600 space-y-1">
                    <li>‚Ä¢ DistilBERT - —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å</li>
                    <li>‚Ä¢ DistilRoBERTa - —ç–º–æ—Ü–∏–∏</li>
                  </ul>
                </div>

                <div>
                  <h4 className="font-medium mb-2">üí° –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</h4>
                  <ul className="text-sm text-gray-600 space-y-1">
                    <li>‚Ä¢ –í—Å–µ –º–æ–¥–µ–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã</li>
                    <li>‚Ä¢ –†–∞–±–æ—Ç–∞—é—Ç —á–µ—Ä–µ–∑ HF API</li>
                    <li>‚Ä¢ Fallback –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞</li>
                  </ul>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Results */}
          <div className="lg:col-span-2">
            <Card className="bg-white/80 backdrop-blur-sm border-0 shadow-lg">
              <CardHeader>
                <CardTitle>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</CardTitle>
                <CardDescription>–°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞</CardDescription>
              </CardHeader>
              <CardContent>
                {results.length === 0 ? (
                  <div className="text-center py-8 text-gray-500">
                    –ù–∞–∂–º–∏—Ç–µ "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª–∏" –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
                  </div>
                ) : (
                  <div className="space-y-4">
                    {results.map((result, index) => (
                      <div key={index} className="p-4 rounded-lg border bg-gray-50/50">
                        <div className="flex items-center justify-between mb-3">
                          <div className="flex items-center gap-3">
                            <div className="flex items-center gap-2">
                              {getTypeIcon(result.type)}
                              <h4 className="font-medium">{result.model}</h4>
                            </div>
                            <Badge variant="outline" className={getTypeColor(result.type)}>
                              {result.type}
                            </Badge>
                          </div>
                          <div className="flex items-center gap-2">
                            {result.available ? (
                              <CheckCircle className="h-5 w-5 text-green-500" />
                            ) : (
                              <XCircle className="h-5 w-5 text-red-500" />
                            )}
                            <Badge variant={result.available ? "default" : "destructive"}>
                              {result.available ? "–î–æ—Å—Ç—É–ø–Ω–∞" : "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞"}
                            </Badge>
                          </div>
                        </div>

                        <div className="text-sm text-gray-600 mb-2">
                          <code className="bg-white px-2 py-1 rounded text-xs">{result.id}</code>
                        </div>

                        {result.available ? (
                          <div className="bg-green-50 p-3 rounded border border-green-200">
                            <p className="text-sm text-green-800 font-medium mb-1">–†–µ–∑—É–ª—å—Ç–∞—Ç:</p>
                            <p className="text-sm text-green-700">{formatResult(result)}</p>
                          </div>
                        ) : (
                          <div className="bg-red-50 p-3 rounded border border-red-200">
                            <p className="text-sm text-red-800 font-medium mb-1">–û—à–∏–±–∫–∞:</p>
                            <p className="text-sm text-red-700">{result.error || "–ú–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"}</p>
                          </div>
                        )}
                      </div>
                    ))}
                  </div>
                )}
              </CardContent>
            </Card>

            {/* Recommendations */}
            {results.length > 0 && (
              <Card className="bg-white/80 backdrop-blur-sm border-0 shadow-lg mt-6">
                <CardHeader>
                  <CardTitle>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    {summary?.available === 0 && (
                      <Alert className="border-red-200 bg-red-50">
                        <XCircle className="h-4 w-4 text-red-600" />
                        <AlertDescription className="text-red-800">
                          –í—Å–µ –º–æ–¥–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ë–æ—Ç –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º.
                        </AlertDescription>
                      </Alert>
                    )}

                    {summary?.available > 0 && summary?.available < summary?.total && (
                      <Alert className="border-yellow-200 bg-yellow-50">
                        <TestTube className="h-4 w-4 text-yellow-600" />
                        <AlertDescription className="text-yellow-800">
                          –ß–∞—Å—Ç—å –º–æ–¥–µ–ª–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ë–æ—Ç –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ —Å fallback.
                        </AlertDescription>
                      </Alert>
                    )}

                    {summary?.available === summary?.total && (
                      <Alert className="border-green-200 bg-green-50">
                        <CheckCircle className="h-4 w-4 text-green-600" />
                        <AlertDescription className="text-green-800">
                          –í—Å–µ –º–æ–¥–µ–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ.
                        </AlertDescription>
                      </Alert>
                    )}

                    <div className="text-sm text-gray-600">
                      <p className="font-medium mb-2">üí° –°–æ–≤–µ—Ç—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:</p>
                      <ul className="space-y-1">
                        <li>‚Ä¢ –ï—Å–ª–∏ –º–æ–¥–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ</li>
                        <li>‚Ä¢ HF Inference API –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å–∞–º</li>
                        <li>‚Ä¢ Fallback –∞–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤—Å–µ–≥–¥–∞</li>
                        <li>‚Ä¢ –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–ª–∞—Ç–Ω—ã–µ API</li>
                      </ul>
                    </div>
                  </div>
                </CardContent>
              </Card>
            )}
          </div>
        </div>
      </div>
    </div>
  )
}
