import { type NextRequest, NextResponse } from "next/server"
import { generateObject } from "ai"
import { openai } from "@ai-sdk/openai"
import { z } from "zod"

const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN
const TELEGRAM_API_URL = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}`

const EmotionAnalysisSchema = z.object({
  emotions: z.array(
    z.object({
      emotion: z.string(),
      confidence: z.number().min(0).max(100),
      emoji: z.string(),
    }),
  ),
  sentiment: z.enum(["positive", "negative", "neutral"]),
  toxicity: z.number().min(0).max(100),
  corporateTerms: z.array(z.string()),
  recommendation: z.string(),
})

async function sendMessage(chatId: number, text: string, replyToMessageId?: number) {
  const response = await fetch(`${TELEGRAM_API_URL}/sendMessage`, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      chat_id: chatId,
      text,
      reply_to_message_id: replyToMessageId,
      parse_mode: "HTML",
    }),
  })

  return response.json()
}

async function analyzeEmotion(text: string) {
  try {
    const { object } = await generateObject({
      model: openai("gpt-4o"),
      schema: EmotionAnalysisSchema,
      prompt: `
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç–º–æ—Ü–∏–∏ –≤ —ç—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏–∑ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞:

"${text}"

–û–ø—Ä–µ–¥–µ–ª–∏:
1. –û—Å–Ω–æ–≤–Ω—ã–µ —ç–º–æ—Ü–∏–∏ —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é (0-100) –∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–º–∏ —ç–º–æ–¥–∑–∏
2. –û–±—â—É—é —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å (positive/negative/neutral)  
3. –£—Ä–æ–≤–µ–Ω—å —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏ (0-100)
4. –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã (–¥–µ–¥–ª–∞–π–Ω, –¥–µ–ø–ª–æ–π, —Ñ–∏—á–∞, ASAP, etc.)
5. –ö—Ä–∞—Ç–∫—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)

–£—á–∏—Ç—ã–≤–∞–π —ç–º–æ–¥–∑–∏, —Å–∞—Ä–∫–∞–∑–º, –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Å–ª–µ–Ω–≥.
`,
    })

    return object
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:", error)
    return null
  }
}

function formatAnalysisResult(analysis: any, originalText: string) {
  const emotionsText = analysis.emotions.map((e: any) => `${e.emoji} <b>${e.emotion}</b> (${e.confidence}%)`).join("\n")

  const sentimentEmoji = {
    positive: "‚úÖ",
    negative: "‚ùå",
    neutral: "‚ö™",
  }[analysis.sentiment]

  const toxicityEmoji = analysis.toxicity > 70 ? "üö®" : analysis.toxicity > 40 ? "‚ö†Ô∏è" : "‚úÖ"

  return `
üß† <b>–ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π:</b>

üìù <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> "${originalText.length > 100 ? originalText.substring(0, 100) + "..." : originalText}"

üòä <b>–≠–º–æ—Ü–∏–∏:</b>
${emotionsText}

${sentimentEmoji} <b>–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:</b> ${analysis.sentiment === "positive" ? "–ü–æ–∑–∏—Ç–∏–≤–Ω–∞—è" : analysis.sentiment === "negative" ? "–ù–µ–≥–∞—Ç–∏–≤–Ω–∞—è" : "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è"}

${toxicityEmoji} <b>–¢–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å:</b> ${analysis.toxicity}%

${analysis.corporateTerms.length > 0 ? `üíº <b>–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã:</b> ${analysis.corporateTerms.join(", ")}` : ""}

üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> ${analysis.recommendation}
`.trim()
}

export async function POST(req: NextRequest) {
  try {
    const body = await req.json()

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (!body.message) {
      return NextResponse.json({ ok: true })
    }

    const message = body.message
    const chatId = message.chat.id
    const messageId = message.message_id
    const text = message.text

    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
    if (!text || text.startsWith("/")) {
      return NextResponse.json({ ok: true })
    }

    // –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    if (text === "/start") {
      await sendMessage(
        chatId,
        `ü§ñ <b>–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–∞—Ö.</b>

üìã <b>–ß—Ç–æ —è —É–º–µ—é:</b>
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —ç–º–æ—Ü–∏–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
‚Ä¢ –û–ø—Ä–µ–¥–µ–ª—è—é —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å
‚Ä¢ –†–∞—Å–ø–æ–∑–Ω–∞—é –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Å–ª–µ–Ω–≥
‚Ä¢ –î–∞—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏

üí¨ <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>
‚Ä¢ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
‚Ä¢ –ò–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /analyze

üîß <b>–ö–æ–º–∞–Ω–¥—ã:</b>
/help - –ø–æ–º–æ—â—å
/analyze - –∞–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è (–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞ (—Å–∫–æ—Ä–æ)

–ù–∞—á–Ω–∏—Ç–µ –ø–∏—Å–∞—Ç—å, –∏ —è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ —ç–º–æ—Ü–∏–∏! üòä`,
      )
      return NextResponse.json({ ok: true })
    }

    if (text === "/help") {
      await sendMessage(
        chatId,
        `üìñ <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π</b>

üéØ <b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ
‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç–º–æ—Ü–∏–π: —Ä–∞–¥–æ—Å—Ç—å, –≥—Ä—É—Å—Ç—å, –≥–Ω–µ–≤, —Å—Ç—Ä–∞—Ö –∏ –¥—Ä.
‚Ä¢ –û—Ü–µ–Ω–∫–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ —É—Ä–æ–≤–Ω—è —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏
‚Ä¢ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —Å–ª–µ–Ω–≥–∞

‚öôÔ∏è <b>–ö–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ <code>/analyze</code> - –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)
‚Ä¢ <code>/help</code> - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
‚Ä¢ <code>/start</code> - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ

üîç <b>–ü—Ä–∏–º–µ—Ä—ã –∞–Ω–∞–ª–∏–∑–∞:</b>
‚Ä¢ "–û–ø—è—Ç—å –¥–µ–¥–ª–∞–π–Ω –≥–æ—Ä–∏—Ç! üò§" ‚Üí –°—Ç—Ä–µ—Å—Å, –Ω–µ–≥–∞—Ç–∏–≤
‚Ä¢ "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥—ã! üéâ" ‚Üí –†–∞–¥–æ—Å—Ç—å, –ø–æ–∑–∏—Ç–∏–≤
‚Ä¢ "–ù—É–∂–Ω–æ —Å—Ä–æ—á–Ω–æ –ø–æ—Ñ–∏–∫—Å–∏—Ç—å –±–∞–≥" ‚Üí –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ, —Ä–∞–±–æ—á–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç

üí° <b>–°–æ–≤–µ—Ç:</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã –≤ –∫–æ–º–∞–Ω–¥–µ!`,
      )
      return NextResponse.json({ ok: true })
    }

    // –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–æ–º–∞–Ω–¥–µ /analyze (–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)
    if (text === "/analyze" && message.reply_to_message) {
      const targetText = message.reply_to_message.text
      if (!targetText) {
        await sendMessage(chatId, "‚ùå –ù–µ –º–æ–≥—É –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞.")
        return NextResponse.json({ ok: true })
      }

      const analysis = await analyzeEmotion(targetText)
      if (!analysis) {
        await sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return NextResponse.json({ ok: true })
      }

      const result = formatAnalysisResult(analysis, targetText)
      await sendMessage(chatId, result, message.reply_to_message.message_id)
      return NextResponse.json({ ok: true })
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–ª–∏–Ω–∞ > 10 —Å–∏–º–≤–æ–ª–æ–≤)
    if (text.length > 10) {
      const analysis = await analyzeEmotion(text)
      if (analysis) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–Ω—ã–µ —ç–º–æ—Ü–∏–∏ –∏–ª–∏ –≤—ã—Å–æ–∫–∞—è —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å
        const hasStrongEmotions = analysis.emotions.some((e: any) => e.confidence > 60)
        const isHighToxicity = analysis.toxicity > 50

        if (hasStrongEmotions || isHighToxicity) {
          const result = formatAnalysisResult(analysis, text)
          await sendMessage(chatId, result, messageId)
        }
      }
    }

    return NextResponse.json({ ok: true })
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ webhook:", error)
    return NextResponse.json({ error: "Internal server error" }, { status: 500 })
  }
}
