"""
–ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º transformers –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –Ω–∞–ø—Ä—è–º—É—é
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–¥–µ–ª—å Osiris/emotion_classifier
"""

import sys
import json
import torch
from transformers import AutoTokenizer, AutoModelForSequenceClassification
import numpy as np

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –º–æ–¥–µ–ª–∏
tokenizer = None
model = None

def load_model():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ Osiris/emotion_classifier"""
    global tokenizer, model
    
    try:
        print("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å Osiris/emotion_classifier...")
        
        # Load model directly
        tokenizer = AutoTokenizer.from_pretrained("Osiris/emotion_classifier")
        model = AutoModelForSequenceClassification.from_pretrained("Osiris/emotion_classifier")
        
        print("‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
        print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Å–æ–≤: {model.config.num_labels}")
        print(f"üè∑Ô∏è –ú–µ—Ç–∫–∏ –∫–ª–∞—Å—Å–æ–≤: {model.config.id2label}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
        return False

def analyze_emotion(text):
    """–ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π –≤ —Ç–µ–∫—Å—Ç–µ"""
    global tokenizer, model
    
    if tokenizer is None or model is None:
        if not load_model():
            return None
    
    try:
        print(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç: '{text}'")
        
        # –¢–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—è
        inputs = tokenizer(text, return_tensors="pt", truncation=True, padding=True, max_length=512)
        
        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        with torch.no_grad():
            outputs = model(**inputs)
            predictions = torch.nn.functional.softmax(outputs.logits, dim=-1)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        scores = predictions[0].numpy()
        labels = [model.config.id2label[i] for i in range(len(scores))]
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–∞–∫ —É Hugging Face API
        results = []
        for label, score in zip(labels, scores):
            results.append({
                "label": label,
                "score": float(score)
            })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
        results.sort(key=lambda x: x["score"], reverse=True)
        
        print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:")
        for result in results:
            print(f"   {result['label']}: {result['score']:.4f} ({result['score']*100:.1f}%)")
        
        return results
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        return None

def test_model():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Ñ—Ä–∞–∑–∞—Ö"""
    test_phrases = [
        "I am very happy today!",
        "This makes me so angry!",
        "I feel sad and lonely",
        "What a surprise!",
        "I'm scared of this situation",
        "This is disgusting",
        "I love this so much",
        "—Ç—ã –¥—É—Ä–∞–∫",
        "—Å–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–æ–µ",
        "–º–Ω–µ –≥—Ä—É—Å—Ç–Ω–æ",
        "–∫–∞–∫–æ–π —É–∂–∞—Å",
        "–æ—Ç–ª–∏—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    ]
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Ñ—Ä–∞–∑–∞—Ö:")
    print("=" * 60)
    
    for phrase in test_phrases:
        print(f"\nüìù –§—Ä–∞–∑–∞: '{phrase}'")
        results = analyze_emotion(phrase)
        
        if results:
            top_emotion = results[0]
            print(f"üéØ –î–æ–º–∏–Ω–∏—Ä—É—é—â–∞—è —ç–º–æ—Ü–∏—è: {top_emotion['label']} ({top_emotion['score']*100:.1f}%)")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å")
        
        print("-" * 40)

def analyze_single_text(text):
    """–ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ Node.js)"""
    results = analyze_emotion(text)
    if results:
        return {
            "success": True,
            "results": results,
            "dominant_emotion": results[0]["label"],
            "confidence": results[0]["score"]
        }
    else:
        return {
            "success": False,
            "error": "Failed to analyze emotion"
        }

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —ç–º–æ—Ü–∏–π —Å transformers")
    print("üì¶ –ú–æ–¥–µ–ª—å: Osiris/emotion_classifier")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if len(sys.argv) > 1:
        if sys.argv[1] == "test":
            test_model()
        else:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            text = " ".join(sys.argv[1:])
            result = analyze_single_text(text)
            print(json.dumps(result, ensure_ascii=False, indent=2))
    else:
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        if load_model():
            print("\nüí¨ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–∏–ª–∏ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞):")
            
            while True:
                try:
                    text = input("\n> ").strip()
                    if text.lower() in ['exit', 'quit', '–≤—ã—Ö–æ–¥']:
                        break
                    if text:
                        analyze_emotion(text)
                except KeyboardInterrupt:
                    break
            
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")

if __name__ == "__main__":
    main()
