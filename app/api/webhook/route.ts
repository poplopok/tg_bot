import { Bot, webhookCallback } from "grammy"
import { updateGlobalStats } from "../admin/stats/route"
import { advancedNLPAnalysis } from "@/lib/nlp-models"

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
const bot = new Bot(process.env.BOT_TOKEN || "")

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
interface EmotionAnalysis {
  emotion: string
  confidence: number
  severity: "low" | "medium" | "high" | "critical"
  categories: {
    aggression: number
    stress: number
    sarcasm: number
    toxicity: number
    positivity: number
  }
  modelUsed: string[]
  originalMessage?: string
  correctedText?: string
  normalizedText?: string
  slangDetected?: string[]
  errorsFixed?: string[]
  detectedLanguage?: string
}

interface UserRisk {
  userId: number
  username?: string
  riskLevel: "low" | "medium" | "high"
  incidents: number
  lastIncident?: Date
}

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —á–∞—Ç–æ–≤
const chatStats = new Map<
  number,
  {
    totalMessages: number
    emotionStats: Record<string, number>
    userRisks: Map<number, UserRisk>
    incidents: Array<{
      id: string
      userId: number
      message: string
      emotion: string
      severity: string
      timestamp: Date
    }>
  }
>()

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
const MODERATION_SETTINGS = {
  thresholds: {
    aggression: 75,
    stress: 80,
    sarcasm: 70,
    toxicity: 85,
  },
  autoBlock: true,
  notifyHR: true,
  hrChatId: process.env.HR_CHAT_ID ? Number.parseInt(process.env.HR_CHAT_ID) : null,
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π - –¢–û–õ–¨–ö–û AI –º–æ–¥–µ–ª–∏
async function analyzeEmotion(text: string): Promise<EmotionAnalysis> {
  const modelPreference = process.env.EMOTION_MODEL || "ai"

  console.log(`[–ê–ù–ê–õ–ò–ó] –¢–µ–∫—Å—Ç: "${text.substring(0, 50)}..." | –†–µ–∂–∏–º: ${modelPreference}`)

  if (modelPreference === "ai" || modelPreference === "advanced") {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¢–û–õ–¨–ö–û –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π NLP –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ AI –º–æ–¥–µ–ª–∏
      const nlpResult = await advancedNLPAnalysis(text)

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ AI
      let severity: EmotionAnalysis["severity"] = "low"
      const toxicity = nlpResult.sentiment.categories.toxicity
      const aggression = nlpResult.sentiment.categories.aggression

      if (toxicity > 85 || aggression > 80) severity = "critical"
      else if (toxicity > 65 || nlpResult.sentiment.confidence > 60) severity = "high"
      else if (nlpResult.sentiment.confidence > 35) severity = "medium"

      console.log(
        `[AI –†–ï–ó–£–õ–¨–¢–ê–¢] –≠–º–æ—Ü–∏—è: ${nlpResult.sentiment.emotion}, –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${nlpResult.sentiment.confidence}%, –¢–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å: ${toxicity}%`,
      )

      return {
        emotion: nlpResult.sentiment.emotion,
        confidence: nlpResult.sentiment.confidence,
        severity,
        categories: nlpResult.sentiment.categories,
        modelUsed: nlpResult.modelUsed,
        originalMessage: text,
        correctedText: nlpResult.correctedText,
        normalizedText: nlpResult.normalizedText,
        slangDetected: nlpResult.slangDetected,
        errorsFixed: nlpResult.errorsFixed,
        detectedLanguage: nlpResult.detectedLanguage,
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞:", error)
      // –ü—Ä–∏ –æ—à–∏–±–∫–µ AI –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      return getNeutralResult(text, error as Error)
    }
  } else {
    // –†–µ–∂–∏–º "disabled" - –∞–Ω–∞–ª–∏–∑ –æ—Ç–∫–ª—é—á–µ–Ω
    return getNeutralResult(text)
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –∏–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ
function getNeutralResult(text: string, error?: Error): EmotionAnalysis {
  console.log(`[–ù–ï–ô–¢–†–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢] ${error ? `–û—à–∏–±–∫–∞: ${error.message}` : "–ê–Ω–∞–ª–∏–∑ –æ—Ç–∫–ª—é—á–µ–Ω"}`)

  return {
    emotion: "neutral",
    confidence: 0,
    severity: "low",
    categories: {
      aggression: 0,
      stress: 0,
      sarcasm: 0,
      toxicity: 0,
      positivity: 0,
    },
    modelUsed: error ? ["error-fallback"] : ["disabled"],
    originalMessage: text,
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è HTML
function escapeHtml(text: string): string {
  return text
    .replace(/&/g, "&amp;")
    .replace(/</g, "&lt;")
    .replace(/>/g, "&gt;")
    .replace(/"/g, "&quot;")
    .replace(/'/g, "&#39;")
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è HR
async function notifyHR(chatId: number, incident: any) {
  if (!MODERATION_SETTINGS.hrChatId) return

  const safeMessage = escapeHtml(incident.originalMessage || incident.message)
  const safeUsername = escapeHtml(incident.username || "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")

  const message = `üö® <b>–ò–Ω—Ü–∏–¥–µ–Ω—Ç –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ</b>

üìç <b>–ß–∞—Ç:</b> ${chatId}
üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @${safeUsername}
‚ö†Ô∏è <b>–¢–∏–ø:</b> ${incident.emotion}
üìä <b>–°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å:</b> ${incident.severity}
ü§ñ <b>AI –ú–æ–¥–µ–ª–∏:</b> ${incident.modelUsed?.join(", ") || "unknown"}

üìù <b>–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>
"${safeMessage}"

<b>AI –∞–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π:</b>
‚Ä¢ –ê–≥—Ä–µ—Å—Å–∏—è: ${incident.categories?.aggression || 0}%
‚Ä¢ –°—Ç—Ä–µ—Å—Å: ${incident.categories?.stress || 0}%
‚Ä¢ –°–∞—Ä–∫–∞–∑–º: ${incident.categories?.sarcasm || 0}%
‚Ä¢ –¢–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å: ${incident.categories?.toxicity || 0}%
‚Ä¢ –ü–æ–∑–∏—Ç–∏–≤: ${incident.categories?.positivity || 0}%

üåê <b>–Ø–∑—ã–∫:</b> ${incident.detectedLanguage || "ru"}
üéØ <b>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å AI:</b> ${incident.confidence || 0}%

üïê <b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString("ru-RU")}

#–∏–Ω—Ü–∏–¥–µ–Ω—Ç #ai_–º–æ–¥–µ—Ä–∞—Ü–∏—è #nlp`

  try {
    await bot.api.sendMessage(MODERATION_SETTINGS.hrChatId, message, {
      parse_mode: "HTML",
    })
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è HR:", error)
    // Fallback –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    try {
      await bot.api.sendMessage(MODERATION_SETTINGS.hrChatId, message.replace(/<[^>]*>/g, ""))
    } catch (fallbackError) {
      console.error("–û—à–∏–±–∫–∞ fallback –æ—Ç–ø—Ä–∞–≤–∫–∏:", fallbackError)
    }
  }
}

// –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
bot.command("start", async (ctx) => {
  const modelInfo = process.env.EMOTION_MODEL || "ai"
  const welcomeMessage = `ü§ñ <b>EmoBot - AI –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —ç–º–æ—Ü–∏–π</b>

–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ AI –º–æ–¥–µ–ª–∏.

<b>–ú–æ–∏ AI –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ üß† –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ AI –º–æ–¥–µ–ª–∏ Hugging Face
‚Ä¢ ‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—á–∞—Ç–æ–∫ (RuSpellRuBERT)
‚Ä¢ üó£Ô∏è –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Å–ª–µ–Ω–≥–∞ —á–µ—Ä–µ–∑ AI
‚Ä¢ üåê –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ (XLM-RoBERTa)
‚Ä¢ üòä –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π (RuBERT-CEDR, DistilRoBERTa)
‚Ä¢ üòè –î–µ—Ç–µ–∫—Ü–∏—è —Å–∞—Ä–∫–∞–∑–º–∞ (RoBERTa-Irony)
‚Ä¢ ‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ AI
‚Ä¢ üõ°Ô∏è AI-–º–æ–¥–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞

<b>–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:</b> ${modelInfo === "ai" || modelInfo === "advanced" ? "üß† –¢–æ–ª—å–∫–æ AI –º–æ–¥–µ–ª–∏" : "‚è∏Ô∏è –ê–Ω–∞–ª–∏–∑ –æ—Ç–∫–ª—é—á–µ–Ω"}

<b>–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:</b>
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞
/nlp_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞
/model - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± AI –º–æ–¥–µ–ª—è—Ö
/test - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI –∞–Ω–∞–ª–∏–∑–∞
/health - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã AI –º–æ–¥–µ–ª–µ–π
/help - –ü–æ–º–æ—â—å

–î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç –∏ –¥–∞–π—Ç–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è AI-–º–æ–¥–µ—Ä–∞—Ü–∏–∏!`

  try {
    await ctx.reply(welcomeMessage, { parse_mode: "HTML" })
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ start —Å–æ–æ–±—â–µ–Ω–∏—è:", error)
    // Fallback –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await ctx.reply(welcomeMessage.replace(/<[^>]*>/g, ""))
  }
})

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è AI –º–æ–¥–µ–ª–µ–π
bot.command("health", async (ctx) => {
  const testPhrase = "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ AI –º–æ–¥–µ–ª–µ–π"

  await ctx.reply("üîç –ü—Ä–æ–≤–µ—Ä—è—é —Ä–∞–±–æ—Ç—É AI –º–æ–¥–µ–ª–µ–π...")

  try {
    const startTime = Date.now()
    const analysis = await analyzeEmotion(testPhrase)
    const endTime = Date.now()
    const processingTime = endTime - startTime

    const healthMessage = `üè• <b>–°—Ç–∞—Ç—É—Å AI –º–æ–¥–µ–ª–µ–π</b>

‚úÖ <b>–°—Ç–∞—Ç—É—Å:</b> –í—Å–µ –º–æ–¥–µ–ª–∏ —Ä–∞–±–æ—Ç–∞—é—Ç
‚è±Ô∏è <b>–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:</b> ${processingTime}ms
ü§ñ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏:</b> ${analysis.modelUsed.join(", ")}
üåê <b>–û–ø—Ä–µ–¥–µ–ª–µ–Ω —è–∑—ã–∫:</b> ${analysis.detectedLanguage || "ru"}
üéØ <b>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</b> ${analysis.confidence}%

<b>–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</b>
‚Ä¢ –≠–º–æ—Ü–∏—è: ${analysis.emotion}
‚Ä¢ –°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å: ${analysis.severity}
‚Ä¢ –¢–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å: ${analysis.categories.toxicity}%

${analysis.correctedText !== testPhrase ? `‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: –î–∞` : "‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: –ù–µ—Ç"}
${analysis.slangDetected && analysis.slangDetected.length > 0 ? `üó£Ô∏è –°–ª–µ–Ω–≥: ${analysis.slangDetected.length} –≤—ã—Ä–∞–∂–µ–Ω–∏–π` : "üó£Ô∏è –°–ª–µ–Ω–≥: –ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω"}

üü¢ <b>–í—Å–µ AI —Å–∏—Å—Ç–µ–º—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ</b>`

    await ctx.reply(healthMessage, { parse_mode: "HTML" })
  } catch (error) {
    const errorMessage = `üî¥ <b>–û—à–∏–±–∫–∞ AI –º–æ–¥–µ–ª–µ–π</b>

‚ùå <b>–°—Ç–∞—Ç—É—Å:</b> –ú–æ–¥–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
üö® <b>–û—à–∏–±–∫–∞:</b> ${error}

<b>–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</b>
‚Ä¢ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ Hugging Face API
‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç HUGGINGFACE_API_KEY
‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º
‚Ä¢ –ú–æ–¥–µ–ª–∏ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω—ã

<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –Ω–∞–ª–∏—á–∏–∏ API –∫–ª—é—á–∞
‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ

‚ö†Ô∏è <b>–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>`

    await ctx.reply(errorMessage, { parse_mode: "HTML" })
  }
})

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è AI –∞–Ω–∞–ª–∏–∑–∞
bot.command("test", async (ctx) => {
  const testPhrases = [
    "—Ç—ã –ø–µ—Ç—É—Ö",
    "—Ç—ã –¥—É—Ä–∞–∫ –∏–¥–∏–æ—Ç",
    "—Å–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–ª–∏—á–Ω—É—é —Ä–∞–±–æ—Ç—É",
    "–∫–æ–Ω–µ—á–Ω–æ, –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–∞—è –∏–¥–µ—è üôÑ",
    "–°–†–û–ß–ù–û!!! –í–°–ï –ì–û–†–ò–¢!!!",
    "–≤—Å–µ —Ö–æ—Ä–æ—à–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å",
    "–∫–∞–∫–∞—è –∂–µ —ç—Ç–æ —Ö–µ—Ä–Ω—è",
    "–æ—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –º–æ–ª–æ–¥—Ü—ã!",
  ]

  await ctx.reply("üß™ –¢–µ—Å—Ç–∏—Ä—É—é AI –º–æ–¥–µ–ª–∏ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ—Ä–∞–∑–∞—Ö...")

  let testResults = "ü§ñ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã AI —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n\n"

  for (const phrase of testPhrases) {
    try {
      const startTime = Date.now()
      const analysis = await analyzeEmotion(phrase)
      const processingTime = Date.now() - startTime

      testResults += `üìù "${escapeHtml(phrase)}"\n`
      testResults += `   üéØ –≠–º–æ—Ü–∏—è: ${analysis.emotion} (${analysis.confidence.toFixed(1)}%)\n`
      testResults += `   ‚ö†Ô∏è –°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å: ${analysis.severity}\n`
      testResults += `   üò° –ê–≥—Ä–µ—Å—Å–∏—è: ${analysis.categories.aggression.toFixed(1)}%\n`
      testResults += `   ‚ò£Ô∏è –¢–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å: ${analysis.categories.toxicity.toFixed(1)}%\n`
      testResults += `   ü§ñ AI –º–æ–¥–µ–ª–∏: ${analysis.modelUsed.join(", ")}\n`
      testResults += `   ‚è±Ô∏è –í—Ä–µ–º—è: ${processingTime}ms\n\n`
    } catch (error) {
      testResults += `‚ùå –û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞ "${escapeHtml(phrase)}": ${error}\n\n`
    }
  }

  await ctx.reply(testResults, { parse_mode: "HTML" })
})

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ NLP
bot.command("nlp_stats", async (ctx) => {
  try {
    const { getNLPStats } = await import("@/lib/nlp-models")
    const stats = await getNLPStats()

    if (!stats) {
      await ctx.reply("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–∫–∞ –Ω–µ —Å–æ–±—Ä–∞–Ω–∞.")
      return
    }

    const statsMessage = `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞</b>

ü§ñ <b>–í—Å–µ–≥–æ AI –∞–Ω–∞–ª–∏–∑–æ–≤:</b> ${stats.totalAnalyses}
üéØ <b>–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å AI:</b> ${stats.averageConfidence.toFixed(1)}%

<b>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤ (AI –¥–µ—Ç–µ–∫—Ü–∏—è):</b>
${Object.entries(stats.languageDistribution)
  .map(([lang, count]) => `üåê ${lang}: ${count}`)
  .join("\n")}

<b>–¢–æ–ø —Å–ª–µ–Ω–≥–∞ (AI —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ):</b>
${Object.entries(stats.slangUsage)
  .sort(([, a], [, b]) => (b as number) - (a as number))
  .slice(0, 5)
  .map(([slang, count]) => `üó£Ô∏è ${escapeHtml(slang)}: ${count}`)
  .join("\n")}

<b>–ß–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏ (AI –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ):</b>
${Object.entries(stats.errorTypes)
  .sort(([, a], [, b]) => (b as number) - (a as number))
  .slice(0, 5)
  .map(([error, count]) => `‚úèÔ∏è ${escapeHtml(error)}: ${count}`)
  .join("\n")}

üïê <b>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π</b>
ü§ñ <b>–†–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ AI –º–æ–¥–µ–ª–∏</b>`

    await ctx.reply(statsMessage, { parse_mode: "HTML" })
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è AI —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", error)
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ AI –∞–Ω–∞–ª–∏–∑–∞")
  }
})

// –ö–æ–º–∞–Ω–¥–∞ /model - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± AI –º–æ–¥–µ–ª—è—Ö
bot.command("model", async (ctx) => {
  const modelInfo = process.env.EMOTION_MODEL || "ai"

  const aiModelInfo = `üß† <b>AI-—Ç–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑</b>

<b>–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ AI –º–æ–¥–µ–ª–∏ Hugging Face:</b>
‚Ä¢ üåê <b>XLM-RoBERTa</b> - –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞
‚Ä¢ ‚úèÔ∏è <b>RuSpellRuBERT</b> - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—á–∞—Ç–æ–∫
‚Ä¢ üòä <b>RuBERT-CEDR</b> - –∞–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π (—Ä—É—Å—Å–∫–∏–π)
‚Ä¢ üòä <b>DistilRoBERTa</b> - –∞–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)
‚Ä¢ üòè <b>RoBERTa-Irony</b> - –¥–µ—Ç–µ–∫—Ü–∏—è —Å–∞—Ä–∫–∞–∑–º–∞

<b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ AI —Å–∏—Å—Ç–µ–º—ã:</b>
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 10+ —è–∑—ã–∫–æ–≤
‚Ä¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ
‚Ä¢ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—á–∞—Ç–æ–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–µ–Ω–≥–∞ —á–µ—Ä–µ–∑ AI
‚Ä¢ –î–µ—Ç–µ–∫—Ü–∏—è —Ç–æ–Ω–∫–∏—Ö —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –Ω—é–∞–Ω—Å–æ–≤
‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Å–∞—Ä–∫–∞–∑–º–∞ –∏ –∏—Ä–æ–Ω–∏–∏

<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å: 92-98% (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞)
‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å: 2-5 —Å–µ–∫—É–Ω–¥
‚Ä¢ –Ø–∑—ã–∫–∏: RU, EN, DE, FR, ES, IT, PT, NL, PL, CS
‚Ä¢ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π: –û–±—É—á–µ–Ω–æ –Ω–∞ –º–∏–ª–ª–∏–æ–Ω–∞—Ö —Ç–µ–∫—Å—Ç–æ–≤

<b>–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º:</b> ${modelInfo === "ai" || modelInfo === "advanced" ? "üü¢ AI –∞–∫—Ç–∏–≤–µ–Ω" : "üî¥ AI –æ—Ç–∫–ª—é—á–µ–Ω"}

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã:</b>
‚Ä¢ EMOTION_MODEL=ai - —Ç–æ–ª—å–∫–æ AI –º–æ–¥–µ–ª–∏
‚Ä¢ EMOTION_MODEL=advanced - —Ç–æ–ª—å–∫–æ AI –º–æ–¥–µ–ª–∏  
‚Ä¢ EMOTION_MODEL=disabled - –∞–Ω–∞–ª–∏–∑ –æ—Ç–∫–ª—é—á–µ–Ω

‚ö†Ô∏è <b>–õ–æ–∫–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω—ã</b>
ü§ñ <b>–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ AI –º–æ–¥–µ–ª–∏</b>`

  await ctx.reply(aiModelInfo, { parse_mode: "HTML" })
})

// –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
bot.command("stats", async (ctx) => {
  const chatId = ctx.chat?.id
  if (!chatId) return

  const stats = chatStats.get(chatId)
  if (!stats) {
    await ctx.reply("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ —Å–æ–±—Ä–∞–Ω–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç.")
    return
  }

  const totalMessages = stats.totalMessages
  const emotions = stats.emotionStats
  const incidents = stats.incidents.length

  const emotionPercentages = Object.entries(emotions)
    .map(([emotion, count]) => ({
      emotion,
      percentage: Math.round((count / totalMessages) * 100),
    }))
    .sort((a, b) => b.percentage - a.percentage)

  const statsMessage = `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞ (AI –∞–Ω–∞–ª–∏–∑)</b>

üìù <b>–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π:</b> ${totalMessages}
‚ö†Ô∏è <b>AI-–æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤:</b> ${incidents}
ü§ñ <b>–†–µ–∂–∏–º:</b> ${process.env.EMOTION_MODEL || "ai"} (—Ç–æ–ª—å–∫–æ AI)

<b>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç–º–æ—Ü–∏–π (AI –¥–µ—Ç–µ–∫—Ü–∏—è):</b>
${emotionPercentages
  .map(({ emotion, percentage }) => {
    const emoji =
      emotion === "aggression"
        ? "üò°"
        : emotion === "stress"
          ? "üò∞"
          : emotion === "sarcasm"
            ? "üòè"
            : emotion === "positivity"
              ? "üòä"
              : "üòê"
    return `${emoji} ${emotion}: ${percentage}%`
  })
  .join("\n")}

<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º (AI –æ—Ü–µ–Ω–∫–∞):</b>
${
  Array.from(stats.userRisks.values())
    .filter((user) => user.riskLevel === "high")
    .map((user) => `‚ö†Ô∏è @${user.username || user.userId} (${user.incidents} AI-–∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤)`)
    .join("\n") || "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º"
}

üïê <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> ${new Date().toLocaleString("ru-RU")}
ü§ñ <b>–ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ AI –º–æ–¥–µ–ª—è–º–∏</b>`

  await ctx.reply(statsMessage, { parse_mode: "HTML" })
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on("message:text", async (ctx) => {
  const chatId = ctx.chat.id
  const userId = ctx.from?.id
  const username = ctx.from?.username
  const text = ctx.message.text
  const chatTitle = ctx.chat.type === "group" || ctx.chat.type === "supergroup" ? ctx.chat.title : undefined

  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
  if (text.startsWith("/")) return

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–∞—Ç–∞
  if (!chatStats.has(chatId)) {
    chatStats.set(chatId, {
      totalMessages: 0,
      emotionStats: {},
      userRisks: new Map(),
      incidents: [],
    })
  }

  const stats = chatStats.get(chatId)!
  stats.totalMessages++

  try {
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–º–æ—Ü–∏–∏ –¢–û–õ–¨–ö–û —á–µ—Ä–µ–∑ AI –º–æ–¥–µ–ª–∏
    const analysis = await analyzeEmotion(text)

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —ç–º–æ—Ü–∏–π
    stats.emotionStats[analysis.emotion] = (stats.emotionStats[analysis.emotion] || 0) + 1

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–º (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ AI –º–æ–¥–µ–ª–∏ —Ä–∞–±–æ—Ç–∞—é—Ç)
    const isIncident = analysis.severity === "high" || analysis.severity === "critical"

    // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    updateGlobalStats({
      chatId,
      chatTitle,
      userId: userId!,
      username,
      emotion: analysis.emotion,
      analysis,
      isIncident,
    })

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    if (userId) {
      const userRisk = stats.userRisks.get(userId) || {
        userId,
        username,
        riskLevel: "low" as const,
        incidents: 0,
      }

      if (isIncident) {
        userRisk.incidents++
        userRisk.lastIncident = new Date()

        if (userRisk.incidents >= 5) userRisk.riskLevel = "high"
        else if (userRisk.incidents >= 2) userRisk.riskLevel = "medium"

        const incident = {
          id: Date.now().toString(),
          userId,
          message: text,
          emotion: analysis.emotion,
          severity: analysis.severity,
          timestamp: new Date(),
        }
        stats.incidents.push(incident)

        // –£–≤–µ–¥–æ–º–ª—è–µ–º HR –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞—Ö
        if (analysis.severity === "critical" && MODERATION_SETTINGS.notifyHR) {
          await notifyHR(chatId, {
            ...incident,
            username,
            originalMessage: analysis.originalMessage,
            correctedText: analysis.correctedText,
            normalizedText: analysis.normalizedText,
            slangDetected: analysis.slangDetected,
            errorsFixed: analysis.errorsFixed,
            detectedLanguage: analysis.detectedLanguage,
            categories: analysis.categories,
            modelUsed: analysis.modelUsed,
            confidence: analysis.confidence,
          })
        }

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è AI-–º–æ–¥–µ—Ä–∞—Ü–∏—è
        if (MODERATION_SETTINGS.autoBlock && analysis.categories.toxicity > MODERATION_SETTINGS.thresholds.toxicity) {
          try {
            await ctx.deleteMessage()

            let moderationMessage = `‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ AI-–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º (—Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å: ${Math.round(analysis.categories.toxicity)}%, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${Math.round(analysis.confidence)}%).`

            if (analysis.slangDetected && analysis.slangDetected.length > 0) {
              moderationMessage += `\n\nüó£Ô∏è AI –æ–±–Ω–∞—Ä—É–∂–∏–ª –Ω–µ—É–º–µ—Å—Ç–Ω—ã–π —Å–ª–µ–Ω–≥: ${analysis.slangDetected.slice(0, 3).join(", ")}`
            }

            if (analysis.errorsFixed && analysis.errorsFixed.length > 0) {
              moderationMessage += `\n‚úèÔ∏è AI —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—é.`
            }

            moderationMessage += `\n\nü§ñ –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω AI –º–æ–¥–µ–ª—è–º–∏: ${analysis.modelUsed.join(", ")}`

            await ctx.reply(moderationMessage)
          } catch (error) {
            console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:", error)
          }
        }

        // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å AI –∞–Ω–∞–ª–∏–∑–æ–º
        if (analysis.severity === "high") {
          let warningMessage = `‚ö†Ô∏è @${username || userId}, AI –∞–Ω–∞–ª–∏–∑ –ø–æ–∫–∞–∑–∞–ª –Ω–µ–≥–∞—Ç–∏–≤–Ω—É—é —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è. –î–∞–≤–∞–π—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –ø–æ–∑–∏—Ç–∏–≤–Ω—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –≤ –∫–æ–º–∞–Ω–¥–µ! üòä`

          if (analysis.slangDetected && analysis.slangDetected.length > 0) {
            warningMessage += `\n\nüí° AI —Å–æ–≤–µ—Ç: –∏–∑–±–µ–≥–∞–π—Ç–µ —Å–ª–µ–Ω–≥–∞ –≤ —Ä–∞–±–æ—á–µ–º –æ–±—â–µ–Ω–∏–∏.`
          }

          warningMessage += `\n\nü§ñ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å AI: ${Math.round(analysis.confidence)}%`

          await ctx.reply(warningMessage, { reply_to_message_id: ctx.message.message_id })
        }
      }

      stats.userRisks.set(userId, userRisk)
    }

    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ AI –∞–Ω–∞–ª–∏–∑–∞
    console.log(
      `[AI –ê–ù–ê–õ–ò–ó ${new Date().toISOString()}] Chat: ${chatId}, User: ${userId}, Emotion: ${analysis.emotion}, Confidence: ${analysis.confidence}%, AI Models: ${analysis.modelUsed?.join(",")}${analysis.slangDetected && analysis.slangDetected.length > 0 ? `, AI Slang: ${analysis.slangDetected.length}` : ""}${analysis.errorsFixed && analysis.errorsFixed.length > 0 ? `, AI Errors: ${analysis.errorsFixed.length}` : ""}`,
    )
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π:", error)
  }
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É
bot.on("my_chat_member", async (ctx) => {
  const update = ctx.update.my_chat_member
  if (update.new_chat_member.status === "member" || update.new_chat_member.status === "administrator") {
    const modelInfo = process.env.EMOTION_MODEL || "ai"
    const welcomeMessage = `ü§ñ <b>EmoBot –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —á–∞—Ç—É!</b>

–ü—Ä–∏–≤–µ—Ç! –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç–º–æ—Ü–∏–∏ –≤ –≤–∞—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —Å –ø–æ–º–æ—â—å—é AI –º–æ–¥–µ–ª–µ–π.

<b>AI –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ üß† –ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ Hugging Face AI
‚Ä¢ ‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—á–∞—Ç–æ–∫ —á–µ—Ä–µ–∑ RuSpellRuBERT
‚Ä¢ üó£Ô∏è –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Å–ª–µ–Ω–≥–∞ —á–µ—Ä–µ–∑ AI
‚Ä¢ üåê –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ —á–µ—Ä–µ–∑ XLM-RoBERTa
‚Ä¢ ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞—Ö —á–µ—Ä–µ–∑ AI
‚Ä¢ üõ°Ô∏è AI-–º–æ–¥–µ—Ä–∞—Ü–∏—è —Ç–æ–∫—Å–∏—á–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
‚Ä¢ üìà –î–µ—Ç–∞–ª—å–Ω–∞—è AI-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞

<b>–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:</b> ${modelInfo === "ai" || modelInfo === "advanced" ? "üü¢ –¢–æ–ª—å–∫–æ AI –º–æ–¥–µ–ª–∏" : "üî¥ –ê–Ω–∞–ª–∏–∑ –æ—Ç–∫–ª—é—á–µ–Ω"}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.

<b>–í–∞–∂–Ω–æ:</b> –î–∞–π—Ç–µ –º–Ω–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π AI-–º–æ–¥–µ—Ä–∞—Ü–∏–∏.

üö´ <b>–õ–æ–∫–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏ —É–¥–∞–ª–µ–Ω—ã - —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ AI –º–æ–¥–µ–ª–∏!</b>`

    try {
      await ctx.reply(welcomeMessage, { parse_mode: "HTML" })
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ welcome —Å–æ–æ–±—â–µ–Ω–∏—è:", error)
      // Fallback –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      await ctx.reply(welcomeMessage.replace(/<[^>]*>/g, ""))
    }
  }
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err) => {
  console.error("–û—à–∏–±–∫–∞ –±–æ—Ç–∞:", err)
})

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º webhook handler
export const POST = webhookCallback(bot, "std/http")
