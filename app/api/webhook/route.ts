import { Bot, webhookCallback } from "grammy"
import { createClient } from "@supabase/supabase-js"

const bot = new Bot("7970844280:AAGNyTlzselT8E6XunCSqnxtvYWePd76JFk")

// –í–ê–ñ–ù–û: –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π SERVICE_ROLE –∫–ª—é—á –∏–∑ Supabase Dashboard
const supabase = createClient(
  "https://ikaufpurzmxnalsaffwa.supabase.co",
  "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImlrYXVmcHVyem14bmFsc2FmZndhIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0ODQ0NTYyNCwiZXhwIjoyMDY0MDIxNjI0fQ.–ó–ê–ú–ï–ù–ò–¢–ï_–ù–ê_–†–ï–ê–õ–¨–ù–´–ô_SERVICE_ROLE_–ö–õ–Æ–ß",
)

// –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö API
function analyzeEmotionLocal(text: string) {
  const lowerText = text.toLowerCase()

  const emotionKeywords = {
    —Ä–∞–¥–æ—Å—Ç—å: ["–æ—Ç–ª–∏—á–Ω–æ", "—Å—É–ø–µ—Ä", "–∑–¥–æ—Ä–æ–≤–æ", "–∫–ª–∞—Å—Å–Ω–æ", "–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ", "üòä", "üòÑ", "üëç", "üéâ", "—É—Ä–∞", "–±—Ä–∞–≤–æ"],
    –≥—Ä—É—Å—Ç—å: ["–≥—Ä—É—Å—Ç–Ω–æ", "–ø–µ—á–∞–ª—å–Ω–æ", "–ø–ª–æ—Ö–æ", "—Ä–∞—Å—Å—Ç—Ä–æ–µ–Ω", "üò¢", "üòî", "üíî", "–ø–µ—á–∞–ª—å"],
    –≥–Ω–µ–≤: ["–±–µ—Å–∏—Ç", "–∑–ª–æ—Å—Ç—å", "—è—Ä–æ—Å—Ç—å", "–¥–æ—Å—Ç–∞–ª–æ", "–∏–¥–∏–æ—Ç", "–¥—É—Ä–∞–∫", "üò°", "ü§¨", "–Ω–µ–Ω–∞–≤–∏–∂—É"],
    —Å—Ç—Ä–∞—Ö: ["–±–æ—é—Å—å", "—Å—Ç—Ä–∞—à–Ω–æ", "–ø–∞–Ω–∏–∫–∞", "—É–∂–∞—Å", "üò∞", "üò®", "—Ç—Ä–µ–≤–æ–≥–∞"],
    –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ: ["–Ω–æ—Ä–º–∞–ª—å–Ω–æ", "—Ö–æ—Ä–æ—à–æ", "–ø–æ–Ω—è—Ç–Ω–æ", "—è—Å–Ω–æ", "–æ–∫–µ–π", "–ª–∞–¥–Ω–æ"],
  }

  const toxicWords = ["–∏–¥–∏–æ—Ç", "–¥—É—Ä–∞–∫", "—Ç—É–ø–æ–π", "–∫—Ä–µ—Ç–∏–Ω", "–≥–æ–≤–Ω–æ", "—Ö–µ—Ä–Ω—è", "–±–µ—Å–∏—Ç", "–¥–æ—Å—Ç–∞–ª–æ"]

  let maxScore = 0
  let primaryEmotion = "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ"

  // –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π
  for (const [emotion, keywords] of Object.entries(emotionKeywords)) {
    let score = 0
    for (const keyword of keywords) {
      if (lowerText.includes(keyword)) {
        score += 0.4
      }
    }
    if (score > maxScore) {
      maxScore = score
      primaryEmotion = emotion
    }
  }

  // –ê–Ω–∞–ª–∏–∑ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏
  let toxicity = 0
  for (const toxicWord of toxicWords) {
    if (lowerText.includes(toxicWord)) {
      toxicity += 0.3
    }
  }

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
  if (text.match(/[–ê-–Ø–Å]{3,}/)) toxicity += 0.1 // –ú–Ω–æ–≥–æ –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤
  if (text.match(/!{3,}/)) toxicity += 0.1 // –ú–Ω–æ–≥–æ –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤

  toxicity = Math.min(toxicity, 1)

  const sentiment =
    primaryEmotion === "—Ä–∞–¥–æ—Å—Ç—å"
      ? "positive"
      : primaryEmotion === "–≥—Ä—É—Å—Ç—å" || primaryEmotion === "–≥–Ω–µ–≤"
        ? "negative"
        : "neutral"

  return {
    primary_emotion: primaryEmotion,
    confidence: Math.max(maxScore, 0.6),
    toxicity: toxicity,
    sentiment: sentiment,
    explanation: "–õ–æ–∫–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º",
  }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Supabase (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
async function saveToSupabase(chatId: number, userId: number, username: string, text: string, analysis: any) {
  try {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const { data: messageData, error: messageError } = await supabase
      .from("messages")
      .insert({
        chat_id: chatId,
        user_id: userId,
        username: username,
        message_text: text,
        created_at: new Date().toISOString(),
      })
      .select()
      .single()

    if (messageError) {
      console.log("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Supabase (–ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É):", messageError.message)
      return null
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
    await supabase.from("emotion_analysis").insert({
      message_id: messageData.id,
      primary_emotion: analysis.primary_emotion,
      confidence: analysis.confidence,
      toxicity: analysis.toxicity,
      sentiment: analysis.sentiment,
      explanation: analysis.explanation,
    })

    console.log("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Supabase")
    return messageData
  } catch (error) {
    console.log("‚ö†Ô∏è –û—à–∏–±–∫–∞ Supabase (–ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É):", error)
    return null
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
bot.command("start", async (ctx) => {
  console.log("üìù –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç:", ctx.from?.username)
  await ctx.reply(
    "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π!\n\n" +
      "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –≥–æ—Ç–æ–≤ –∫ –∞–Ω–∞–ª–∏–∑—É\n" +
      "üìù –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n\n" +
      "–ö–æ–º–∞–Ω–¥—ã:\n" +
      "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n" +
      "/test - —Ç–µ—Å—Ç –±–æ—Ç–∞\n" +
      "/help - –ø–æ–º–æ—â—å",
  )
})

bot.command("test", async (ctx) => {
  console.log("üß™ –ö–æ–º–∞–Ω–¥–∞ /test")
  await ctx.reply("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ! –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω.")
})

bot.command("help", async (ctx) => {
  await ctx.reply(
    "üîç –ö–∞–∫ —è —Ä–∞–±–æ—Ç–∞—é:\n\n" +
      "‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —ç–º–æ—Ü–∏–∏ –≤ –≤–∞—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö\n" +
      "‚Ä¢ –û–ø—Ä–µ–¥–µ–ª—è—é —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å –∏ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å\n" +
      "‚Ä¢ –†–∞–±–æ—Ç–∞—é —Å —Ä—É—Å—Å–∫–∏–º —è–∑—ã–∫–æ–º\n" +
      "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É—é –ª–æ–∫–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º\n\n" +
      "üí¨ –ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏—Ç–µ –∫–∞–∫ –æ–±—ã—á–Ω–æ, —è –±—É–¥—É –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å!",
  )
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on("message:text", async (ctx) => {
  const text = ctx.message.text
  const chatId = ctx.chat.id
  const userId = ctx.from.id
  const username = ctx.from.username || ctx.from.first_name || "Unknown"

  console.log(`üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${username}: "${text}"`)

  try {
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–º–æ—Ü–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ
    const analysis = analyzeEmotionLocal(text)
    console.log("üß† –ê–Ω–∞–ª–∏–∑:", analysis)

    // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ Supabase (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è)
    await saveToSupabase(chatId, userId, username, text, analysis)

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏
    const emotionEmojis: { [key: string]: string } = {
      —Ä–∞–¥–æ—Å—Ç—å: "üòä",
      –≥—Ä—É—Å—Ç—å: "üò¢",
      –≥–Ω–µ–≤: "üò°",
      —Å—Ç—Ä–∞—Ö: "üò∞",
      –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ: "üòê",
    }

    const emoji = emotionEmojis[analysis.primary_emotion] || "ü§î"

    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    let response = `${emoji} **–≠–º–æ—Ü–∏—è**: ${analysis.primary_emotion}\n`
    response += `üìä **–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å**: ${Math.round(analysis.confidence * 100)}%\n`
    response += `üé≠ **–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å**: ${analysis.sentiment}\n`

    if (analysis.toxicity > 0.2) {
      response += `‚ö†Ô∏è **–¢–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å**: ${Math.round(analysis.toxicity * 100)}%\n`
    }

    response += `ü§ñ ${analysis.explanation}`

    // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    if (analysis.toxicity > 0.6) {
      response += `\n\nüö® **–í–Ω–∏–º–∞–Ω–∏–µ!** –í—ã—Å–æ–∫–∞—è —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞.`
    } else if (analysis.toxicity > 0.3) {
      response += `\n\n‚ö†Ô∏è –£–º–µ—Ä–µ–Ω–Ω–∞—è —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å. –ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –∫ —Ç–æ–Ω—É.`
    }

    await ctx.reply(response, {
      reply_to_message_id: ctx.message.message_id,
      parse_mode: "Markdown",
    })

    console.log("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞:", error)
    await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
  }
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err) => {
  console.error("üö® –û—à–∏–±–∫–∞ –±–æ—Ç–∞:", err)
})

console.log("üöÄ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

export const POST = webhookCallback(bot, "std/http")

// GET –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
export async function GET() {
  return new Response("‚úÖ Webhook endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç!", { status: 200 })
}
