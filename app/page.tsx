"use client"

import { useState } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Textarea } from "@/components/ui/textarea"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { AlertCircle, Brain, MessageSquare, TrendingUp, Users } from "lucide-react"
import { Alert, AlertDescription } from "@/components/ui/alert"

interface EmotionResult {
  emotion: string
  confidence: number
  color: string
  description: string
}

interface AnalysisResult {
  text: string
  language: "ru" | "en"
  emotions: EmotionResult[]
  sentiment: "positive" | "negative" | "neutral"
  toxicity: number
  corporateTerms: string[]
  recommendations: string[]
}

export default function EmotionAnalysisBot() {
  const [inputText, setInputText] = useState("")
  const [analysis, setAnalysis] = useState<AnalysisResult | null>(null)
  const [isAnalyzing, setIsAnalyzing] = useState(false)

  const analyzeText = async () => {
    if (!inputText.trim()) return

    setIsAnalyzing(true)

    try {
      const response = await fetch("/api/analyze-emotion", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ text: inputText }),
      })

      if (!response.ok) {
        throw new Error("–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞")
      }

      const result = await response.json()
      setAnalysis(result)
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞:", error)
    } finally {
      setIsAnalyzing(false)
    }
  }

  const getSentimentColor = (sentiment: string) => {
    switch (sentiment) {
      case "positive":
        return "text-green-600"
      case "negative":
        return "text-red-600"
      default:
        return "text-gray-600"
    }
  }

  const getSentimentText = (sentiment: string) => {
    switch (sentiment) {
      case "positive":
        return "–ü–æ–∑–∏—Ç–∏–≤–Ω–∞—è"
      case "negative":
        return "–ù–µ–≥–∞—Ç–∏–≤–Ω–∞—è"
      default:
        return "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è"
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-4">
      <div className="max-w-6xl mx-auto space-y-6">
        {/* Header */}
        <div className="text-center space-y-4">
          <div className="flex items-center justify-center gap-2">
            <Brain className="w-8 h-8 text-blue-600" />
            <h1 className="text-3xl font-bold text-gray-900">–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –≠–º–æ—Ü–∏–π –¥–ª—è –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –ß–∞—Ç–æ–≤</h1>
          </div>
          <p className="text-gray-600 max-w-2xl mx-auto">
            –û–ø—Ä–µ–¥–µ–ª—è–π—Ç–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –æ–∫—Ä–∞—Å–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π, –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–π—Ç–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∏ –ø–æ–≤—ã—à–∞–π—Ç–µ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã —Å
            –ø–æ–º–æ—â—å—é –ò–ò-–∞–Ω–∞–ª–∏–∑–∞
          </p>
        </div>

        {/* Input Section */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <MessageSquare className="w-5 h-5" />
              –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            </CardTitle>
            <CardDescription>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ä—É—Å—Å–∫–∏–π –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫–∏, –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Å–ª–µ–Ω–≥ –∏ —ç–º–æ–¥–∑–∏</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <Textarea
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: '–û–ø—è—Ç—å —ç—Ç–æ—Ç –¥–µ–¥–ª–∞–π–Ω! üò§ –ö–æ–≥–¥–∞ —É–∂–µ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç?'"
              value={inputText}
              onChange={(e) => setInputText(e.target.value)}
              className="min-h-[120px] resize-none"
            />
            <Button onClick={analyzeText} disabled={!inputText.trim() || isAnalyzing} className="w-full">
              {isAnalyzing ? "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é..." : "–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç–º–æ—Ü–∏–∏"}
            </Button>
          </CardContent>
        </Card>

        {/* Results */}
        {analysis && (
          <Tabs defaultValue="emotions" className="space-y-4">
            <TabsList className="grid w-full grid-cols-4">
              <TabsTrigger value="emotions">–≠–º–æ—Ü–∏–∏</TabsTrigger>
              <TabsTrigger value="sentiment">–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å</TabsTrigger>
              <TabsTrigger value="corporate">–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑</TabsTrigger>
              <TabsTrigger value="recommendations">–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</TabsTrigger>
            </TabsList>

            <TabsContent value="emotions">
              <Card>
                <CardHeader>
                  <CardTitle>–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —ç–º–æ—Ü–∏–∏</CardTitle>
                  <CardDescription>–Ø–∑—ã–∫: {analysis.language === "ru" ? "–†—É—Å—Å–∫–∏–π" : "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π"}</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {analysis.emotions.map((emotion, index) => (
                      <div key={index} className="space-y-2">
                        <div className="flex items-center justify-between">
                          <div className="flex items-center gap-2">
                            <Badge variant="outline" className={`${emotion.color} border-current`}>
                              {emotion.emotion}
                            </Badge>
                            <span className="text-sm text-gray-600">{emotion.description}</span>
                          </div>
                          <span className="text-sm font-medium">{Math.round(emotion.confidence)}%</span>
                        </div>
                        <Progress value={emotion.confidence} className="h-2" />
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="sentiment">
              <Card>
                <CardHeader>
                  <CardTitle>–û–±—â–∞—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="text-center space-y-2">
                    <div className={`text-2xl font-bold ${getSentimentColor(analysis.sentiment)}`}>
                      {getSentimentText(analysis.sentiment)}
                    </div>
                  </div>

                  <div className="space-y-2">
                    <div className="flex items-center justify-between">
                      <span>–£—Ä–æ–≤–µ–Ω—å —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏</span>
                      <span className="font-medium">{Math.round(analysis.toxicity)}%</span>
                    </div>
                    <Progress
                      value={analysis.toxicity}
                      className={`h-3 ${analysis.toxicity > 70 ? "bg-red-100" : analysis.toxicity > 40 ? "bg-yellow-100" : "bg-green-100"}`}
                    />
                  </div>

                  {analysis.toxicity > 50 && (
                    <Alert>
                      <AlertCircle className="h-4 w-4" />
                      <AlertDescription>–û–±–Ω–∞—Ä—É–∂–µ–Ω –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –Ω–µ–≥–∞—Ç–∏–≤–∞. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ü–∏—è.</AlertDescription>
                    </Alert>
                  )}
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="corporate">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Users className="w-5 h-5" />
                    –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div>
                    <h4 className="font-medium mb-2">–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã:</h4>
                    <div className="flex flex-wrap gap-2">
                      {analysis.corporateTerms.map((term, index) => (
                        <Badge key={index} variant="secondary">
                          {term}
                        </Badge>
                      ))}
                    </div>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="recommendations">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <TrendingUp className="w-5 h-5" />
                    –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <ul className="space-y-2">
                    {analysis.recommendations.map((rec, index) => (
                      <li key={index} className="flex items-start gap-2">
                        <div className="w-2 h-2 bg-blue-500 rounded-full mt-2 flex-shrink-0" />
                        <span className="text-sm">{rec}</span>
                      </li>
                    ))}
                  </ul>
                </CardContent>
              </Card>
            </TabsContent>
          </Tabs>
        )}

        {/* Demo Examples */}
        <Card>
          <CardHeader>
            <CardTitle>–ü—Ä–∏–º–µ—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <h4 className="font-medium">–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã:</h4>
                <div className="space-y-1 text-sm">
                  <p
                    className="p-2 bg-red-50 rounded cursor-pointer hover:bg-red-100"
                    onClick={() => setInputText("–û–ø—è—Ç—å —ç—Ç–æ—Ç –¥–µ–¥–ª–∞–π–Ω! üò§ –ö–æ–≥–¥–∞ —É–∂–µ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç?")}
                  >
                    "–û–ø—è—Ç—å —ç—Ç–æ—Ç –¥–µ–¥–ª–∞–π–Ω! üò§ –ö–æ–≥–¥–∞ —É–∂–µ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç?"
                  </p>
                  <p
                    className="p-2 bg-red-50 rounded cursor-pointer hover:bg-red-100"
                    onClick={() => setInputText("–ù—É –∫–æ–Ω–µ—á–Ω–æ, –≤—Å–µ –ø–æ –ø–ª–∞–Ω—É... üôÑ")}
                  >
                    "–ù—É –∫–æ–Ω–µ—á–Ω–æ, –≤—Å–µ –ø–æ –ø–ª–∞–Ω—É... üôÑ"
                  </p>
                </div>
              </div>
              <div className="space-y-2">
                <h4 className="font-medium">–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã:</h4>
                <div className="space-y-1 text-sm">
                  <p
                    className="p-2 bg-green-50 rounded cursor-pointer hover:bg-green-100"
                    onClick={() => setInputText("–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥—ã! üéâ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –¥–µ–ø–ª–æ—é!")}
                  >
                    "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥—ã! üéâ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –¥–µ–ø–ª–æ—é!"
                  </p>
                  <p
                    className="p-2 bg-green-50 rounded cursor-pointer hover:bg-green-100"
                    onClick={() => setInputText("–°–ø–∞—Å–∏–±–æ –∑–∞ —Ñ–∏–¥–±–µ–∫, —É—á—Ç–µ–º –≤ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ üëç")}
                  >
                    "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ñ–∏–¥–±–µ–∫, —É—á—Ç–µ–º –≤ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ üëç"
                  </p>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}
