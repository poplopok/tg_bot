"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π
"""

import json
from emotion_analyzer import EmotionAnalyzer

def test_emotions():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö"""
    
    # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    analyzer = EmotionAnalyzer()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã
    test_cases = [
        # –†—É—Å—Å–∫–∏–µ —Ñ—Ä–∞–∑—ã
        ("–≠—Ç–æ –æ—Ç–ª–∏—á–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å! –Ø –æ—á–µ–Ω—å —Ä–∞–¥ –∑–∞ –≤–∞—Å!", "ru", "positivity"),
        ("–ú–µ–Ω—è —ç—Ç–æ –æ—á–µ–Ω—å —Ä–∞–∑–¥—Ä–∞–∂–∞–µ—Ç! –°–∫–æ–ª—å–∫–æ –º–æ–∂–Ω–æ —ç—Ç–æ —Ç–µ—Ä–ø–µ—Ç—å?!", "ru", "aggression"),
        ("–Ø –Ω–µ —É—Å–ø–µ–≤–∞—é –∑–∞–∫–æ–Ω—á–∏—Ç—å –∫ –¥–µ–¥–ª–∞–π–Ω—É, —É –º–µ–Ω—è –ø–∞–Ω–∏–∫–∞!", "ru", "stress"),
        ("–î–∞, –∫–æ–Ω–µ—á–Ω–æ, –æ—Ç–ª–∏—á–Ω–∞—è –∏–¥–µ—è... üôÑ", "ru", "sarcasm"),
        ("–ù–æ—Ä–º–∞–ª—å–Ω–æ, —Ä–∞–±–æ—Ç–∞–µ–º –¥–∞–ª—å—à–µ.", "ru", "neutral"),
        
        # –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ —Ñ—Ä–∞–∑—ã
        ("This is amazing news! I'm so happy for you!", "en", "positivity"),
        ("This is really annoying! How long can this go on?!", "en", "aggression"),
        ("I can't finish by the deadline, I'm panicking!", "en", "stress"),
        ("Yeah, sure, great idea... üôÑ", "en", "sarcasm"),
        ("Okay, let's continue working.", "en", "neutral"),
    ]
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π\n")
    print("=" * 80)
    
    for i, (text, expected_lang, expected_emotion) in enumerate(test_cases, 1):
        print(f"\nüìù –¢–µ—Å—Ç {i}: {text}")
        print(f"üéØ –û–∂–∏–¥–∞–µ–º—ã–π —è–∑—ã–∫: {expected_lang}, —ç–º–æ—Ü–∏—è: {expected_emotion}")
        
        try:
            result = analyzer.analyze_emotion(text)
            
            print(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç:")
            print(f"   –Ø–∑—ã–∫: {result['detected_language']}")
            print(f"   –≠–º–æ—Ü–∏—è: {result['emotion']} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']:.1f}%)")
            print(f"   –ò—Å—Ö–æ–¥–Ω–∞—è —ç–º–æ—Ü–∏—è: {result['raw_emotion']}")
            print(f"   –ú–æ–¥–µ–ª—å: {result['model_used']}")
            print(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏–∏:")
            for category, score in result['categories'].items():
                print(f"     {category}: {score:.1f}%")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å
            lang_correct = "‚úÖ" if result['detected_language'] == expected_lang else "‚ùå"
            emotion_correct = "‚úÖ" if result['emotion'] == expected_emotion else "‚ùå"
            
            print(f"   –Ø–∑—ã–∫: {lang_correct} | –≠–º–æ—Ü–∏—è: {emotion_correct}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        
        print("-" * 80)
    
    print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    test_emotions()
